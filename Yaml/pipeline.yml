trigger: none

pool:
  vmImage: 'windows-latest'

variables:
  artifact_path: '$(Build.ArtifactStagingDirectory)'
  deployment_env: 'Dev'
  config_file: 'config.json'  # Updated - file is at root level

jobs:
- job: DeployPowerBIReports
  displayName: 'Deploy Power BI Reports'
  steps:
    # Step 1: Install .NET SDK
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '5.x'

    # Step 2: Install Power BI Desktop
    - task: PowerShell@2
      displayName: 'Install Power BI Desktop'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing Power BI Desktop via winget..."
          try {
              winget install --id Microsoft.PowerBI --silent --accept-package-agreements --accept-source-agreements
              Write-Host "✓ Power BI Desktop installed successfully"
          } catch {
              Write-Warning "Winget installation failed, continuing: $_"
          }
        continueOnError: true

    # Step 3: Install PowerShell Modules
    - task: PowerShell@2
      displayName: 'Install Required PowerShell Modules'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing required PowerShell modules..."
          $modules = @('MicrosoftPowerBIMgmt')
          
          foreach ($module in $modules) {
              Write-Host "Installing module: $module"
              try {
                  Install-Module -Name $module -Force -AllowClobber -Scope CurrentUser -SkipPublisherCheck -Repository PSGallery -Confirm:$false
                  Import-Module -Name $module -Force
                  Write-Host "✓ Module $module installed successfully"
              } catch {
                  Write-Warning "Failed to install $module : $_"
              }
          }
        pwsh: true
        errorActionPreference: 'continue'

    # Step 4: Verify Files and Structure
    - task: PowerShell@2
      displayName: 'Verify Files and Structure'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "=== FILE VERIFICATION ==="
          Write-Host "Build Sources Directory: $(Build.SourcesDirectory)"
          
          # Check for script file
          $scriptPath = "$(Build.SourcesDirectory)\Scripts\MainOrchestrator.ps1"
          Write-Host "Checking script at: $scriptPath"
          if (Test-Path $scriptPath) {
              Write-Host "✅ Script found"
              Write-Host "Script size: $((Get-Item $scriptPath).Length) bytes"
          } else {
              Write-Host "❌ Script not found"
          }
          
          # Check for config file
          $configPath = "$(Build.SourcesDirectory)\config.json"
          Write-Host "Checking config at: $configPath"
          if (Test-Path $configPath) {
              Write-Host "✅ Config found"
              Write-Host "Config size: $((Get-Item $configPath).Length) bytes"
              
              # Show config content (masked)
              try {
                  $config = Get-Content $configPath | ConvertFrom-Json
                  Write-Host "Config contains:"
                  Write-Host "  - TenantID: $($config.TenantID)"
                  Write-Host "  - ClientID: $($config.ClientID)"
                  Write-Host "  - DevWorkspaceID: $($config.DevWorkspaceID)"
                  Write-Host "  - UATWorkspaceID: $($config.UATWorkspaceID)"
              } catch {
                  Write-Warning "Could not parse config file: $_"
              }
          } else {
              Write-Host "❌ Config not found"
          }
          
          # List Scripts folder contents
          $scriptsDir = "$(Build.SourcesDirectory)\Scripts"
          if (Test-Path $scriptsDir) {
              Write-Host "`nScripts folder contents:"
              Get-ChildItem $scriptsDir | ForEach-Object {
                  Write-Host "  - $($_.Name) ($($_.Length) bytes)"
              }
          }
          
          # Look for PBIX/PBIP files
          Write-Host "`n=== REPORT FILES ==="
          $pbixFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter "*.pbix" -ErrorAction SilentlyContinue
          Write-Host "PBIX files found: $($pbixFiles.Count)"
          foreach ($file in $pbixFiles) {
              Write-Host "  - $($file.FullName)"
          }
          
          $pbipFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter "*.pbip" -ErrorAction SilentlyContinue
          Write-Host "PBIP files found: $($pbipFiles.Count)"
          foreach ($file in $pbipFiles) {
              Write-Host "  - $($file.FullName)"
          }
        pwsh: true
        continueOnError: true

    # Step 5: Run PowerShell Script with Correct Method
    - task: PowerShell@2
      displayName: 'Deploy Power BI Reports'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)\Scripts\MainOrchestrator.ps1'  # Correct path without /Visa
        arguments: '-Workspace "$(deployment_env)" -ConfigFile "$(Build.SourcesDirectory)\$(config_file)"'
        pwsh: true
        workingDirectory: '$(Build.SourcesDirectory)'
        errorActionPreference: 'stop'

    # Step 6: Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'