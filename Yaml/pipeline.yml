trigger: none
  # branches:
  #   include:
  #     - CICDSetup  # Trigger pipeline on commits to the main branch

pool:
  vmImage: 'windows-latest'  # Use Windows-based agent to run PowerShell scripts and Power BI Desktop

variables:
  artifact_path: '$(Build.ArtifactStagingDirectory)'  # Path where build artifacts will be stored
  deployment_env: 'Dev'  # Change to 'UAT' as needed
  config_file: 'Config/config.json'  # Path to your config.json file (should be stored in the repository)

jobs:
- job: DeployPowerBIReports
  displayName: 'Deploy Power BI Reports'
  steps:
    # Step 1: Install .NET SDK (if required by your PowerShell Core scripts)
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '5.x'  # Make sure your PowerShell Core uses the appropriate version

    # Step 2: Install Power BI Desktop (for PBIP to PBIX conversion) - FIXED VERSION
    - task: PowerShell@2
      displayName: 'Install Power BI Desktop'
      inputs:
        targetType: 'inline'
        script: |
          # Method 1: Try using Chocolatey (most reliable for CI/CD)
          Write-Host "Attempting to install Power BI Desktop via Chocolatey..."
          try {
              # Install Chocolatey if not present
              if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                  Write-Host "Installing Chocolatey..."
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                  iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                  refreshenv
              }
              
              # Install Power BI Desktop via Chocolatey
              choco install powerbi --yes --no-progress --force
              Write-Host "Power BI Desktop installed successfully via Chocolatey."
              
              # Verify installation
              $powerBIPath = Get-ChildItem -Path "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe" -ErrorAction SilentlyContinue
              if ($powerBIPath) {
                  Write-Host "Power BI Desktop found at: $($powerBIPath.FullName)"
                  exit 0
              }
          } catch {
              Write-Warning "Chocolatey installation failed: $_"
          }
          
          # Method 2: Direct download with improved error handling
          Write-Host "Attempting direct download method..."
          try {
              # Use Microsoft Store link (more stable)
              $installerUrl = "https://download.microsoft.com/download/8/8/0/880BCA75-79DD-466A-927D-1ABF1F5454B0/PBIDesktopSetup_x64.exe"
              $installerPath = "$env:TEMP\PBIDesktopSetup.exe"
              
              # Clean up any existing installer
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force
              }
              
              Write-Host "Downloading Power BI Desktop from: $installerUrl"
              Write-Host "Download path: $installerPath"
              
              # Download with progress and better error handling
              $webClient = New-Object System.Net.WebClient
              $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
              $webClient.DownloadFile($installerUrl, $installerPath)
              
              # Verify download
              if (-not (Test-Path $installerPath)) {
                  throw "Download failed - file not found at $installerPath"
              }
              
              $fileSize = (Get-Item $installerPath).Length
              Write-Host "Downloaded file size: $([math]::Round($fileSize/1MB, 2)) MB"
              
              if ($fileSize -lt 10MB) {
                  throw "Downloaded file appears to be too small (corrupt): $fileSize bytes"
              }
              
              # Verify file integrity (check if it's a valid executable)
              $fileHeader = Get-Content $installerPath -Encoding Byte -TotalCount 2
              if ($fileHeader[0] -ne 77 -or $fileHeader[1] -ne 90) {  # "MZ" header for Windows executables
                  throw "Downloaded file is not a valid Windows executable"
              }
              
              Write-Host "File validation successful. Starting installation..."
              
              # Install Power BI Desktop with extended timeout
              $process = Start-Process -FilePath $installerPath -ArgumentList "/quiet", "/norestart" -PassThru -Wait
              
              if ($process.ExitCode -ne 0) {
                  throw "Installation failed with exit code: $($process.ExitCode)"
              }
              
              Write-Host "Installation process completed."
              
              # Wait a bit for installation to complete
              Start-Sleep -Seconds 10
              
              # Verify installation
              $possiblePaths = @(
                  "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe",
                  "C:\Program Files (x86)\Microsoft Power BI Desktop\bin\PBIDesktop.exe"
              )
              
              $powerBIDesktopPath = $null
              foreach ($path in $possiblePaths) {
                  if (Test-Path $path) {
                      $powerBIDesktopPath = $path
                      break
                  }
              }
              
              if (-not $powerBIDesktopPath) {
                  throw "Power BI Desktop executable not found after installation"
              }
              
              Write-Host "Power BI Desktop successfully installed at: $powerBIDesktopPath"
              
              # Clean up installer
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
              }
              
          } catch {
              Write-Error "All installation methods failed. Error: $_"
              
              # Method 3: Alternative - use winget (Windows Package Manager)
              Write-Host "Attempting installation via winget as last resort..."
              try {
                  winget install --id Microsoft.PowerBI --silent --accept-package-agreements --accept-source-agreements
                  Write-Host "Power BI Desktop installed via winget"
              } catch {
                  Write-Error "Final installation attempt failed: $_"
                  exit 1
              }
          }

    # Step 3: Run the PowerShell script to convert PBIP to PBIX and deploy the reports
    - task: PowerShell@2
      displayName: 'Run PowerShell Script to Deploy Reports'
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/Scripts/MainOrchestrator.ps1'  # Path to the PowerShell script
        arguments: '-Workspace $(deployment_env) -ConfigFile $(Build.SourcesDirectory)/$(config_file)'  # Pass environment and config file as parameters
        pwsh: true  # Use PowerShell Core (pwsh)
        workingDirectory: '$(Build.SourcesDirectory)'  # Set the script working directory to root of the repository

    # Step 4: Publish build artifacts (optional step, if you want to store outputs like PBIX files)
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Path to artifacts
        ArtifactName: 'drop'  # Name of the artifact
        publishLocation: 'Container'