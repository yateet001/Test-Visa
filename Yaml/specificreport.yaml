trigger: none

# Pipeline Parameters
parameters:
  - name: targetEnvironment
    displayName: 'Deploy to Environment'
    type: string
    default: 'UAT'
    values:
      - 'DEV'
      - 'UAT'
      - 'PROD'

  - name: deploymentMode
    displayName: 'Deployment Mode'
    type: string
    default: 'SELECTIVE'
    values:
      - 'ALL'
      - 'SELECTIVE'

  - name: reportNames
    displayName: 'Report Names (comma-separated, e.g: Sales1,Sales5,Sales10)'
    type: string
    default: 'Sales Dashboard 2'

  - name: autoDetectChanges
    displayName: 'Auto-detect changed reports from Git?'
    type: boolean
    default: false

pool:
  vmImage: 'windows-latest'

variables:
  TenantId: 'e4d98dd2-9199-42e5-ba8b-da3e763ede2e'
  ClientId: 'dd3aa383-4d69-4854-8885-9e483ffb5b72'
  ClientSecret: '82H8Q~TuZnTU9XRytWpK46g.YP_QoTTUww-NWday'
  BaseFolder: '$(Build.SourcesDirectory)\Sales'
  ModuleFolder: '$(Pipeline.Workspace)/fabric-module'

  # Environment Configuration
  DevWorkspaceId: 'b42dfb7f-667e-48f9-97c9-12198c700e09'
  DevWorkspaceName: 'VISACICDDev'
  DevSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Dev/SalesDashboard.xlsx'
  DevGatewayId: 'fabd7e5d-1737-4c50-88c0-7ec4874f99e5'

  UatWorkspaceId: '436d60a0-3a50-480d-b7e5-f7a9d3cd5fb5'
  UatWorkspaceName: 'VISACICDQA'
  UatSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Uat/SalesDashboard.xlsx'
  UatGatewayId: 'd91d80d8-19e2-4959-af4b-74d40bde50d8'

  ProdWorkspaceId: 'cb0a4bb8-e16a-4886-b803-4dcceda22cd0'
  ProdWorkspaceName: 'VISACICDProd'
  ProdSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Prod/SalesDashboard.xlsx'
  ProdGatewayId: '757a32db-a93c-4516-9f43-da8968e99aac'

steps:
  # Step 1: Download FabricPS-PBIP module once
  - task: PowerShell@2
    displayName: 'üì¶ Download FabricPS-PBIP Module'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $moduleFolder = "$(ModuleFolder)"
        New-Item -ItemType Directory -Path $moduleFolder -ErrorAction SilentlyContinue | Out-Null

        @(
            "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
            "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1"
        ) | ForEach-Object {
            $file = Split-Path $_ -Leaf
            Invoke-WebRequest -Uri $_ -OutFile (Join-Path $moduleFolder $file) -UseBasicParsing
        }
        Write-Host "‚úÖ FabricPS-PBIP module downloaded to $moduleFolder"

  # Step 2: Setup environment and authenticate
  - task: PowerShell@2
    displayName: 'üîß Setup and Authentication'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        $TargetEnvironment = "${{ parameters.targetEnvironment }}"
        switch ($TargetEnvironment.ToUpper().Trim()) {
            "DEV" {
                $WorkspaceId = "$(DevWorkspaceId)"
                $WorkspaceName = "$(DevWorkspaceName)"
                $TargetSharePointUrl = "$(DevSharePointUrl)"
                $TargetGatewayId = "$(DevGatewayId)"
            }
            "UAT" {
                $WorkspaceId = "$(UatWorkspaceId)"
                $WorkspaceName = "$(UatWorkspaceName)"
                $TargetSharePointUrl = "$(UatSharePointUrl)"
                $TargetGatewayId = "$(UatGatewayId)"
            }
            "PROD" {
                $WorkspaceId = "$(ProdWorkspaceId)"
                $WorkspaceName = "$(ProdWorkspaceName)"
                $TargetSharePointUrl = "$(ProdSharePointUrl)"
                $TargetGatewayId = "$(ProdGatewayId)"
            }
        }

        Import-Module "$(ModuleFolder)/FabricPS-PBIP.psd1" -Force
        Import-Module Az.Accounts -Force

        Set-FabricAuthToken -servicePrincipalId "$(ClientId)" `
          -servicePrincipalSecret "$(ClientSecret)" `
          -tenantId "$(TenantId)" -reset

        Write-Host "##vso[task.setvariable variable=CurrentWorkspaceId]$WorkspaceId"
        Write-Host "##vso[task.setvariable variable=CurrentWorkspaceName]$WorkspaceName"
        Write-Host "##vso[task.setvariable variable=CurrentSharePointUrl]$TargetSharePointUrl"
        Write-Host "##vso[task.setvariable variable=CurrentGatewayId]$TargetGatewayId"

        Write-Host "‚úÖ Authentication complete for $TargetEnvironment"

  # Step 3: Discover and validate reports
  - task: PowerShell@2
    displayName: 'üîç Discover and Validate Reports'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        $DeploymentMode = "${{ parameters.deploymentMode }}"
        $ReportNamesInput = "${{ parameters.reportNames }}"

        $pbipFolder = "$(BaseFolder)"
        if (!(Test-Path $pbipFolder)) {
            Write-Error "‚ùå Base folder not found: $pbipFolder"
            exit 1
        }

        $allSemanticModels = Get-ChildItem -Path $pbipFolder -Directory | Where-Object { $_.Name -like "*.SemanticModel" }
        $allReports = Get-ChildItem -Path $pbipFolder -Directory | Where-Object { $_.Name -like "*.Report" }

        $availableProjects = @()
        foreach ($sm in $allSemanticModels) {
            $projectBaseName = $sm.Name -replace '\.SemanticModel$', ''
            $correspondingReport = $allReports | Where-Object { $_.Name -eq "$projectBaseName.Report" }
            if ($correspondingReport) {
                $availableProjects += @{
                    Name = $projectBaseName
                    SemanticModelPath = $sm.FullName
                    ReportPath = $correspondingReport.FullName
                }
            }
        }

        if ($DeploymentMode -eq "ALL") {
            $reportsToDeployList = $availableProjects
        } elseif ($DeploymentMode -eq "SELECTIVE") {
            $requestedReports = $ReportNamesInput -split ',' | ForEach-Object { $_.Trim() }
            $reportsToDeployList = @()
            foreach ($reportName in $requestedReports) {
                $match = $availableProjects | Where-Object { $_.Name -eq $reportName -or $_.Name -like "*$reportName*" }
                if ($match) { $reportsToDeployList += $match }
            }
        }

        $reportsListJson = ($reportsToDeployList | ConvertTo-Json -Depth 3)
        $reportsListBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($reportsListJson))
        Write-Host "##vso[task.setvariable variable=ReportsToDeployBase64]$reportsListBase64"

        Write-Host "‚úÖ Reports ready for deployment: $($reportsToDeployList.Count)"

  # Step 4: Deploy reports
  - task: PowerShell@2
    displayName: 'üöÄ Deploy Reports'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        Import-Module "$(ModuleFolder)/FabricPS-PBIP.psd1" -Force

        $body = @{
            grant_type    = "client_credentials"
            client_id     = "$(ClientId)"
            client_secret = "$(ClientSecret)"
            scope         = "https://analysis.windows.net/powerbi/api/.default"
        }
        $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$(TenantId)/oauth2/v2.0/token" -Method POST -Body $body
        $accessToken = $tokenResponse.access_token

        $reportsListJson = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("$(ReportsToDeployBase64)"))
        $reportsToDeployList = $reportsListJson | ConvertFrom-Json
        $WorkspaceId = "$(CurrentWorkspaceId)"

        foreach ($project in $reportsToDeployList) {
            Write-Host "üì• Importing Semantic Model: $($project.Name)"
            $semanticModelImport = Import-FabricItem -workspaceId $WorkspaceId -path $project.SemanticModelPath
            Start-Sleep -Seconds 20

            Write-Host "üìÑ Importing Report: $($project.Name)"
            Import-FabricItem -workspaceId $WorkspaceId -path $project.ReportPath -itemProperties @{ "semanticModelId" = $semanticModelImport.Id }

            Write-Host "‚úÖ Deployment complete for: $($project.Name)"
        }
