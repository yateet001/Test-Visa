trigger: none

# Pipeline Parameters
parameters:
  - name: targetEnvironment
    displayName: 'Deploy to Environment'
    type: string
    default: 'UAT'
    values:
      - 'DEV'
      - 'UAT'
      - 'PROD'

  - name: deploymentMode
    displayName: 'Deployment Mode'
    type: string
    default: 'SELECTIVE'
    values:
      - 'ALL'
      - 'SELECTIVE'

  - name: reportNames
    displayName: 'Report Names (comma-separated, e.g: Sales1,Sales5,Sales10)'
    type: string
    default: 'Sales Dashboard 2'

  - name: autoDetectChanges
    displayName: 'Auto-detect changed reports from Git?'
    type: boolean
    default: false

pool:
  vmImage: 'windows-latest'

variables:
  TenantId: 'e4d98dd2-9199-42e5-ba8b-da3e763ede2e'
  ClientId: 'dd3aa383-4d69-4854-8885-9e483ffb5b72'
  ClientSecret: '82H8Q~TuZnTU9XRytWpK46g.YP_QoTTUww-NWday'
  BaseFolder: '$(Build.SourcesDirectory)\Sales'
  ModuleFolder: '$(Pipeline.Workspace)/fabric-module'

  # Environment Configuration
  DevWorkspaceId: 'b42dfb7f-667e-48f9-97c9-12198c700e09'
  DevWorkspaceName: 'VISACICDDev'
  DevSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Dev/SalesDashboard.xlsx'
  DevGatewayId: 'fabd7e5d-1737-4c50-88c0-7ec4874f99e5'

  UatWorkspaceId: '436d60a0-3a50-480d-b7e5-f7a9d3cd5fb5'
  UatWorkspaceName: 'VISACICDQA'
  UatSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Uat/SalesDashboard.xlsx'
  UatGatewayId: 'd91d80d8-19e2-4959-af4b-74d40bde50d8'

  ProdWorkspaceId: 'cb0a4bb8-e16a-4886-b803-4dcceda22cd0'
  ProdWorkspaceName: 'VISACICDProd'
  ProdSharePointUrl: 'https://testmaq.sharepoint.com/sites/VisaTest/Shared%20Documents/Prod/SalesDashboard.xlsx'
  ProdGatewayId: '757a32db-a93c-4516-9f43-da8968e99aac'

steps:
  # Step 1: Download FabricPS-PBIP module once
  - task: PowerShell@2
    displayName: 'üì¶ Download FabricPS-PBIP Module'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $moduleFolder = "$(ModuleFolder)"
        New-Item -ItemType Directory -Path $moduleFolder -ErrorAction SilentlyContinue | Out-Null

        @(
            "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
            "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1"
        ) | ForEach-Object {
            $file = Split-Path $_ -Leaf
            Invoke-WebRequest -Uri $_ -OutFile (Join-Path $moduleFolder $file) -UseBasicParsing
        }
        Write-Host "‚úÖ FabricPS-PBIP module downloaded to $moduleFolder"

  # Step 2: Setup environment and authenticate
  - task: PowerShell@2
    displayName: 'üîß Setup and Authentication'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        $TargetEnvironment = "${{ parameters.targetEnvironment }}"
        switch ($TargetEnvironment.ToUpper().Trim()) {
            "DEV" {
                $WorkspaceId = "$(DevWorkspaceId)"
                $WorkspaceName = "$(DevWorkspaceName)"
                $TargetSharePointUrl = "$(DevSharePointUrl)"
                $TargetGatewayId = "$(DevGatewayId)"
            }
            "UAT" {
                $WorkspaceId = "$(UatWorkspaceId)"
                $WorkspaceName = "$(UatWorkspaceName)"
                $TargetSharePointUrl = "$(UatSharePointUrl)"
                $TargetGatewayId = "$(UatGatewayId)"
            }
            "PROD" {
                $WorkspaceId = "$(ProdWorkspaceId)"
                $WorkspaceName = "$(ProdWorkspaceName)"
                $TargetSharePointUrl = "$(ProdSharePointUrl)"
                $TargetGatewayId = "$(ProdGatewayId)"
            }
        }

        Import-Module "$(ModuleFolder)/FabricPS-PBIP.psd1" -Force
        Import-Module Az.Accounts -Force

        Set-FabricAuthToken -servicePrincipalId "$(ClientId)" `
          -servicePrincipalSecret "$(ClientSecret)" `
          -tenantId "$(TenantId)" -reset

        Write-Host "##vso[task.setvariable variable=CurrentWorkspaceId]$WorkspaceId"
        Write-Host "##vso[task.setvariable variable=CurrentWorkspaceName]$WorkspaceName"
        Write-Host "##vso[task.setvariable variable=CurrentSharePointUrl]$TargetSharePointUrl"
        Write-Host "##vso[task.setvariable variable=CurrentGatewayId]$TargetGatewayId"

        Write-Host "‚úÖ Authentication complete for $TargetEnvironment"

  # Step 3: Discover and validate reports
  - task: PowerShell@2
    displayName: 'üîç Discover and Validate Reports'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        $DeploymentMode = "${{ parameters.deploymentMode }}"
        $ReportNamesInput = "${{ parameters.reportNames }}"

        $pbipFolder = "$(BaseFolder)"
        if (!(Test-Path $pbipFolder)) {
            Write-Error "‚ùå Base folder not found: $pbipFolder"
            exit 1
        }

        $allSemanticModels = Get-ChildItem -Path $pbipFolder -Directory | Where-Object { $_.Name -like "*.SemanticModel" }
        $allReports = Get-ChildItem -Path $pbipFolder -Directory | Where-Object { $_.Name -like "*.Report" }

        $availableProjects = @()
        foreach ($sm in $allSemanticModels) {
            $projectBaseName = $sm.Name -replace '\.SemanticModel$', ''
            $correspondingReport = $allReports | Where-Object { $_.Name -eq "$projectBaseName.Report" }
            if ($correspondingReport) {
                $availableProjects += @{
                    Name = $projectBaseName
                    SemanticModelPath = $sm.FullName
                    ReportPath = $correspondingReport.FullName
                }
            }
        }

        if ($DeploymentMode -eq "ALL") {
            $reportsToDeployList = $availableProjects
        } elseif ($DeploymentMode -eq "SELECTIVE") {
            $requestedReports = $ReportNamesInput -split ',' | ForEach-Object { $_.Trim() }
            $reportsToDeployList = @()
            foreach ($reportName in $requestedReports) {
                $match = $availableProjects | Where-Object { $_.Name -eq $reportName -or $_.Name -like "*$reportName*" }
                if ($match) { $reportsToDeployList += $match }
            }
        }

        $reportsListJson = ($reportsToDeployList | ConvertTo-Json -Depth 3)
        $reportsListBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($reportsListJson))
        Write-Host "##vso[task.setvariable variable=ReportsToDeployBase64]$reportsListBase64"

        Write-Host "‚úÖ Reports ready for deployment: $($reportsToDeployList.Count)"

  # Step 4: Pre-deployment checks and data source updates
  - task: PowerShell@2
    displayName: 'üîß Pre-deployment Data Source Configuration'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Stop"

        Import-Module "$(ModuleFolder)/FabricPS-PBIP.psd1" -Force

        # Get OAuth token for Power BI REST API calls
        $body = @{
            grant_type    = "client_credentials"
            client_id     = "$(ClientId)"
            client_secret = "$(ClientSecret)"
            scope         = "https://analysis.windows.net/powerbi/api/.default"
        }
        $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$(TenantId)/oauth2/v2.0/token" -Method POST -Body $body
        $accessToken = $tokenResponse.access_token

        Write-Host "‚úÖ Power BI REST API token obtained"

        # Decode reports list
        $reportsListJson = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("$(ReportsToDeployBase64)"))
        $reportsToDeployList = $reportsListJson | ConvertFrom-Json
        $WorkspaceId = "$(CurrentWorkspaceId)"
        $TargetSharePointUrl = "$(CurrentSharePointUrl)"
        $TargetGatewayId = "$(CurrentGatewayId)"

        Write-Host "üîç Pre-deployment checks for $($reportsToDeployList.Count) reports"
        Write-Host "üìç Target SharePoint URL: $TargetSharePointUrl"
        Write-Host "üåâ Target Gateway ID: $TargetGatewayId"

        # Store variables for next step
        Write-Host "##vso[task.setvariable variable=PowerBIAccessToken]$accessToken"

  # Step 5: Deploy reports with enhanced error handling
  - task: PowerShell@2
    displayName: 'üöÄ Deploy Reports with Data Source Updates'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $ErrorActionPreference = "Continue"  # Changed to Continue for better error handling

        Import-Module "$(ModuleFolder)/FabricPS-PBIP.psd1" -Force

        $accessToken = "$(PowerBIAccessToken)"
        $headers = @{ 'Authorization' = "Bearer $accessToken"; 'Content-Type' = 'application/json' }

        $reportsListJson = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("$(ReportsToDeployBase64)"))
        $reportsToDeployList = $reportsListJson | ConvertFrom-Json
        $WorkspaceId = "$(CurrentWorkspaceId)"
        $TargetSharePointUrl = "$(CurrentSharePointUrl)"
        $TargetGatewayId = "$(CurrentGatewayId)"

        $deploymentResults = @()

        foreach ($project in $reportsToDeployList) {
            Write-Host "üîÑ Processing: $($project.Name)"
            $deploymentSuccess = $false
            
            try {
                # Step 1: Import Semantic Model
                Write-Host "üì• Importing Semantic Model: $($project.Name)"
                $semanticModelImport = Import-FabricItem -workspaceId $WorkspaceId -path $project.SemanticModelPath
                
                if ($semanticModelImport -and $semanticModelImport.Id) {
                    Write-Host "‚úÖ Semantic Model imported successfully. ID: $($semanticModelImport.Id)"
                    
                    # Wait for import to complete
                    Write-Host "‚è≥ Waiting for semantic model to be ready..."
                    Start-Sleep -Seconds 30
                    
                    # Step 2: Update Data Sources (this is the key fix for your error)
                    Write-Host "üîß Updating data sources for semantic model..."
                    
                    try {
                        # Get current data sources
                        $dataSourcesUrl = "https://api.powerbi.com/v1.0/myorg/groups/$WorkspaceId/datasets/$($semanticModelImport.Id)/datasources"
                        $currentDataSources = Invoke-RestMethod -Uri $dataSourcesUrl -Method GET -Headers $headers
                        
                        Write-Host "üìä Found $($currentDataSources.value.Count) data source(s)"
                        
                        # Update SharePoint data source if exists
                        foreach ($dataSource in $currentDataSources.value) {
                            if ($dataSource.datasourceType -eq "SharePointList" -or $dataSource.connectionDetails.url -like "*sharepoint*") {
                                Write-Host "üîÑ Updating SharePoint data source..."
                                
                                $updateBody = @{
                                    updateDetails = @(
                                        @{
                                            datasourceSelector = @{
                                                datasourceType = $dataSource.datasourceType
                                                connectionDetails = $dataSource.connectionDetails
                                            }
                                            connectionDetails = @{
                                                url = $TargetSharePointUrl
                                            }
                                        }
                                    )
                                } | ConvertTo-Json -Depth 10
                                
                                $updateUrl = "https://api.powerbi.com/v1.0/myorg/groups/$WorkspaceId/datasets/$($semanticModelImport.Id)/Default.UpdateDatasources"
                                Invoke-RestMethod -Uri $updateUrl -Method POST -Body $updateBody -Headers $headers
                                Write-Host "‚úÖ SharePoint data source updated"
                            }
                        }
                        
                        # Step 3: Update Gateway (if needed)
                        if ($TargetGatewayId -ne "00000000-0000-0000-0000-000000000000") {
                            Write-Host "üåâ Binding to gateway: $TargetGatewayId"
                            
                            $gatewayBody = @{
                                gatewayObjectId = $TargetGatewayId
                            } | ConvertTo-Json
                            
                            $gatewayUrl = "https://api.powerbi.com/v1.0/myorg/groups/$WorkspaceId/datasets/$($semanticModelImport.Id)/Default.BindToGateway"
                            Invoke-RestMethod -Uri $gatewayUrl -Method POST -Body $gatewayBody -Headers $headers
                            Write-Host "‚úÖ Gateway binding completed"
                        }
                        
                    } catch {
                        Write-Warning "‚ö†Ô∏è Data source update failed: $($_.Exception.Message)"
                        Write-Host "üîÑ Continuing with report import..."
                    }
                    
                    # Step 4: Refresh the dataset to test connections
                    Write-Host "üîÑ Refreshing dataset to validate connections..."
                    try {
                        $refreshUrl = "https://api.powerbi.com/v1.0/myorg/groups/$WorkspaceId/datasets/$($semanticModelImport.Id)/refreshes"
                        $refreshBody = @{ notifyOption = "NoNotification" } | ConvertTo-Json
                        Invoke-RestMethod -Uri $refreshUrl -Method POST -Body $refreshBody -Headers $headers
                        Write-Host "‚úÖ Dataset refresh initiated"
                    } catch {
                        Write-Warning "‚ö†Ô∏è Dataset refresh failed: $($_.Exception.Message)"
                    }
                    
                    # Wait a bit more before report import
                    Start-Sleep -Seconds 20
                    
                    # Step 5: Import Report
                    Write-Host "üìÑ Importing Report: $($project.Name)"
                    $reportImport = Import-FabricItem -workspaceId $WorkspaceId -path $project.ReportPath -itemProperties @{ "semanticModelId" = $semanticModelImport.Id }
                    
                    if ($reportImport) {
                        Write-Host "‚úÖ Report imported successfully"
                        $deploymentSuccess = $true
                    }
                    
                } else {
                    Write-Error "‚ùå Failed to import semantic model"
                }
                
            } catch {
                Write-Error "‚ùå Deployment failed for $($project.Name): $($_.Exception.Message)"
                Write-Host "üîç Full error details: $($_.Exception)"
                
                # Continue with next report instead of failing entire pipeline
            }
            
            $deploymentResults += @{
                ProjectName = $project.Name
                Success = $deploymentSuccess
                Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
        }

        # Summary
        Write-Host "`nüìä Deployment Summary:"
        $successCount = ($deploymentResults | Where-Object { $_.Success }).Count
        $totalCount = $deploymentResults.Count
        
        Write-Host "‚úÖ Successful deployments: $successCount/$totalCount"
        
        foreach ($result in $deploymentResults) {
            $status = if ($result.Success) { "‚úÖ SUCCESS" } else { "‚ùå FAILED" }
            Write-Host "  - $($result.ProjectName): $status"
        }
        
        if ($successCount -eq 0 -and $totalCount -gt 0) {
            Write-Host "##vso[task.logissue type=error]All deployments failed"
            exit 1
        } elseif ($successCount -lt $totalCount) {
            Write-Host "##vso[task.logissue type=warning]Some deployments failed"
        } else {
            Write-Host "üéâ All deployments completed successfully!"
        }